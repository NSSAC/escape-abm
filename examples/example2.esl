config YOUTH_IMMUNITY : float = 0.8

node
  pid: int node key
  age: int static
end

edge
  targetPID: int target node key
  sourcePID: int source node key
end

enum state_t
  S, E, Isymp, Iasymp, R
end

contagion c1
  state type state_t

  transition
    E -> Isymp, p = symp_prob, dwell = 3.0
    E -> Iasymp,
        p = lambda (n) { return 1.0 - symp_prob(n) },
        dwell = 3.0
    Isymp -> R, dwell = recovery_time
    Iasymp -> R, dwell = recovery_time
  end

  transmission
    Isymp => S -> E
    Iasymp => S -> E
  end

  susceptibility = c1_susceptibility
  infectivity = 1.0
  transmissibility = 0.5
end

distribution
  normal recovery_time
    mean = 5.0, std = 1.0, min = 0.0, max = 10.0
  end
end

def symp_prob(n: node) -> float:
  if n.age <= 18:
    return YOUTH_IMMUNITY
  else:
    return 1.0
  end
end

def intervene():
  if CUR_TICK < 10:
    from node
    filter lambda (n) { return n.c1.state == S }
    sample ABSOLUTE 5
    apply lambda (n) { n.c1.state = E }
  end
end


